# Werken met Github

+++

## Workflow

@snap[midpoint, south]
![eenvoudige](assets/img/workflow-remote.png)
@snapend


+++

## Github

[https://github.com/](https://github.com/)

* Bekendste hosting-provider voor Git repositories
* Gratis voor open source

+++

## Github account

* Maak een Github-account aan
    * koppel aan emailadres 

+++

## Repository aanmaken

Maak op Github een nieuwe repository aan (bv. `my_project`)

* "Initialize this repository with a README"
* Website wordt: `https://github.com/USER/PROJECT`
* Repo url (https) wordt: `https://github.com/USER/PROJECT.git`
* Repo url (**ssh**) wordt: `git@github.com:USER/PROJECT.git`

+++

![Nieuw project aanmaken voor een team](assets/new-repo.png)

+++

## Lokale kopie maken

1. Klik groene knop "Clone or download", kopieer url
2. Open commando-prompt (Git Bash)
3. `git clone https://github.com/bertvv/my_project.git`

+++

## Lokale kopie maken

```console
$ git clone https://github.com/bertvv/my_project.git
Cloning into 'my_project'...
remote: Counting objects: 9, done.
remote: Compressing objects: 100% (6/6), done.
Receiving objects: 100% (9/9), done.
remote: Total 9 (delta 0), reused 9 (delta 0)
Checking connectivity... done.
```

+++

## Github workflow voor één persoon

```bash
$ git pull
[bewerk bestanden]
$ git status
$ git add file1 file2
$ git commit -m "Beschrijving van de wijzigingen"
$ git push
```

- `pull`: Wijzigingen Github -> lokaal
- `push`: Wijzigingen lokaal -> Github

+++

## Het kan ook anders

Om een ​​nieuwe remote toe te voegen, gebruikt u de opdracht `git remote add` op de terminal in de directory waarin uw repository is opgeslagen.

Het commando git remote add neemt twee argumenten:

1. Een externe naam, bijvoorbeeld oorsprong
2. Een externe URL, bijvoorbeeld https://github.com/user/repo.git

+++

## Het kan ook anders
```console
# Set a new remote
$ git remote add origin https://github.com/user/repo.git
# Verify new remote
$ git remote -v
origin  https://github.com/user/repo.git (fetch)
origin  https://github.com/user/repo.git (push)
```

## Tips and tricks <sup>1</sup>


De vraag is hoe we gewijzigde bestanden aan staging kunnen toevoegen en tegelijkertijd kunnen commiten. Git biedt de volgende super opdracht:

```
$ git commit -a -m "Alles in één keer"
```
+++

## Tips and tricks <sup>2</sup>

Er zullen momenten zijn waarop je spijt zult hebben van het committen. 

* Hoe kun je dat resterende bestand toevoegen aan de laatste commit? 
* * En hoe kun je een bestand aanpassen als je het al hebt vastgelegd? 

Er zijn twee manieren om terug te keren. Ten eerste kun je de commit ongedaan maken:

```
 git reset --soft HEAD^
```
+++

"reset" is het tegenovergestelde van de opdracht "add". Deze keer vertelt "reset" Git om de commit ongedaan te maken. Wat volgt op "reset" is de optie "--soft". De "--soft" optie betekent dat de commit is geannuleerd en wordt verplaatst vóór HEAD. U kunt nu een ander bestand toevoegen aan de stagging en committen, of u kunt bestanden wijzigen en vastleggen.
+++
## Tips and tricks <sup>3</sup>

```
$ git add file-i-forgot-to-add.html
$ git commit --amend -m "Add the remaining file"
```
we kunnen een commit corrigeren door de "-amend" -optie te gebruiken bij een repository. Voeg gewoon het overgebleven bestand toe aan de staging.

+++
### Oefening

1. Genereer een repository - mag ook dezelfde zijn als in voorgaande oefening
2. Maak een repository op Github
3. Push het werk dat je gemaakt hebt naar de remote
4. Speel eens met `reset` en de andere commando's.
	1. Hoe verplaats je bestanden?
	2. Hoe verwijder je bestanden?
	3. Wat doet `git log --stat`, `git log --pretty=oneline`
	4. Wat doet het programma `gitk`

+++ 

5. Maak een commit waar je bestanden vergeet. Hoe kan je dit aanpassen met `git commit --amend`
6. Hoe kan je veranderingen in een getrackt bestand revoken (dus terug het originele bestand ophalen?) bv. met `git checkout -- <file>...`

